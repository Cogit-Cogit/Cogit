package com.whitemind.cogit.member.controller;import javax.servlet.http.HttpServletRequest;import com.whitemind.cogit.common.response.ListResponseResult;import com.whitemind.cogit.member.dto.request.AddMemberRequest;import com.whitemind.cogit.member.dto.request.CreateStudyRequest;import org.springframework.web.bind.annotation.*;import com.whitemind.cogit.common.response.ResponseResult;import com.whitemind.cogit.member.dto.request.DeleteMemberRequest;import com.whitemind.cogit.member.dto.response.GetMemberResponse;import com.whitemind.cogit.member.service.StudyService;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;@Slf4j@RestController@RequiredArgsConstructor@RequestMapping("/study")public class StudyController {	private final StudyService studyService;	@PostMapping("/create")	public ResponseResult createStudy(@RequestBody CreateStudyRequest study, HttpServletRequest request) throws Exception {		log.info("createStudy | 스터디 이름 : " + study.getStudyName());		studyService.createStudy(study.getStudyName(), (Integer) request.getAttribute("memberId"));		return ResponseResult.successResponse;	}	@PostMapping("/member/add")	public ResponseResult addMember(@RequestBody AddMemberRequest addMember, HttpServletRequest request) throws Exception {		log.info("addMember | 스터디 멤버 추가");		studyService.addMember(addMember, (Integer) request.getAttribute("memberId"));		return ResponseResult.successResponse;	}	@GetMapping("/memberList")	public ListResponseResult<GetMemberResponse> getMemberList(@RequestParam int teamId, HttpServletRequest request) throws Exception {		log.info("getMemberList | 스터디 멤버 리스트 조회");		return new ListResponseResult<>(studyService.getMemberList(teamId, (Integer) request.getAttribute("memberId")));	}	@DeleteMapping("/leave")	public ResponseResult deleteMember(@RequestBody DeleteMemberRequest deleteMember, HttpServletRequest request) throws Exception {		log.info("deleteMember | 스터디 멤버 방출");		studyService.deleteMember(deleteMember, (Integer) request.getAttribute("memberId"));		return  ResponseResult.successResponse;	}	@GetMapping("/member/ranking")	public ListResponseResult<GetMemberResponse> getMemberRank(@RequestParam int teamId, HttpServletRequest request) throws Exception {		log.info("getMemberRank | 스터디 멤버 랭킹 조회");		return new ListResponseResult<>(studyService.getMemberLank(teamId, (Integer) request.getAttribute("memberId")));	}}