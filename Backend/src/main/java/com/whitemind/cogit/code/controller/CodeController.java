package com.whitemind.cogit.code.controller;import com.whitemind.cogit.auth.service.GithubService;import com.whitemind.cogit.code.dto.request.WriteCommentRequest;import com.whitemind.cogit.code.dto.response.CodeDetailResponse;import com.whitemind.cogit.code.dto.response.GetCodeHistoryResponse;import com.whitemind.cogit.code.service.CodeService;import com.whitemind.cogit.code.service.CommentService;import com.whitemind.cogit.common.S3.service.S3UploadService;import com.whitemind.cogit.common.response.ListResponseResult;import com.whitemind.cogit.common.response.ResponseResult;import com.whitemind.cogit.common.response.SingleResponseResult;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.*;import com.whitemind.cogit.code.dto.request.CodeRequest;import javax.servlet.http.HttpServletRequest;import java.util.UUID;@Slf4j@RestController@RequiredArgsConstructor@RequestMapping("/code")public class CodeController {	private final GithubService githubService;	private final CodeService codeService;	private final CommentService commentService;	private final S3UploadService s3UploadService;	@PostMapping("/commit")	public ResponseResult commitCode(@RequestBody CodeRequest code, HttpServletRequest request) throws Exception {		log.info("commitCode | git commit 실행");		githubService.uploadGitCode(code, request);		log.info("commitCode | database 저장");		String uuid = UUID.randomUUID().toString();		codeService.saveCode(code, uuid, (int)request.getAttribute("memberId"));		log.info("commitCode | S3 업로드");		s3UploadService.uploadToS3(code.getCodeContent(), uuid, code.getCodeFileExtension());		return ResponseResult.successResponse;	}	@PostMapping("/detail/comment")	public ResponseResult writeComment(@RequestBody WriteCommentRequest writeCommentRequest, HttpServletRequest request) throws  Exception {		log.info("writeComment | 댓글 작성");		commentService.writeComment(writeCommentRequest, request);		return ResponseResult.successResponse;	}	@GetMapping("/detail")	public ResponseResult getCodeDetail(@RequestParam int codeId) {		log.info("getCodeDetail | 코드 상세 조회");		return new SingleResponseResult<CodeDetailResponse>(codeService.getCodeDetail(codeId));	}	@GetMapping("/history")	public ResponseResult getCodeHistory(@RequestParam int memberId, @RequestParam int scheduleId) {		log.info("getCodeHistory | 코드 제출 기록 조회");		return new ListResponseResult<GetCodeHistoryResponse>(codeService.getCodeHistory(memberId, scheduleId));	}	@GetMapping("/my-history")	public ListResponseResult<GetCodeHistoryResponse> getMyCodeHistory(@RequestParam int questId, @RequestParam String platform, @RequestParam int page, HttpServletRequest request) {		log.info("getMyCodeHistory | 내 코드 제출 기록 조회");		return new ListResponseResult<>(codeService.getMyCodeHistory(questId, platform, page, request));	}}